package com.demo.producer.excpetion;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;

@ControllerAdvice
public class ProducerExceptionHandler {
	
	/*
	 * @Override protected ResponseEntity<Object>
	 * handleMissingPathVariable(MissingPathVariableException ex, HttpHeaders
	 * headers, HttpStatus status, WebRequest request) {
	 * 
	 * String error = ex.getParameter() + " parameter is missing";
	 * ErrorMessageHandler apiError =message(HttpStatus.BAD_REQUEST,
	 * ex.getLocalizedMessage(), error) ; return new
	 * ResponseEntity<Object>(apiError, new HttpHeaders(), HttpStatus.BAD_REQUEST);
	 * 
	 * }
	 */
	
	@ExceptionHandler(value=MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public ErrorResponse handleException(MethodArgumentNotValidException exception) {

	    List<ErrorModel> errorMessages = exception.getBindingResult().getFieldErrors().stream()
	    		.map(err -> new ErrorModel(err.getField(),err.getRejectedValue(),err.getDefaultMessage()))
	            .map(err -> new ErrorModel(err.getField(), err.getRejectedValue(), err.getDefaultMessage()))
	            .distinct()
	            .collect(Collectors.toList());
	    return ErrorResponse.builder().errorMessage(errorMessages).build();
	}
	
	@ExceptionHandler({ProducerException.class})
	public ResponseEntity<Object> handleExceptions(Exception exp,WebRequest req){
		if(exp instanceof ProducerException) {
			return buildErrorResponse(HttpStatus.BAD_REQUEST, exp.getMessage(), exp);
		}
		return buildErrorResponse(HttpStatus.INTERNAL_SERVER_ERROR, exp.getMessage(), exp);
		
	}

	
	public ResponseEntity<Object> buildErrorResponse(HttpStatus status, String message,Exception exp){
		return ResponseEntity.status(status).body(new ErrorResponse(status.value(),message));
	}
}
